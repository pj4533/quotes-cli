
### Data Handling

#### OpenAI API Integration

- **API Key Management:** Loads the `OPENAI_API_KEY` from the `.env` file using `swift-dotenv`.
- **API Requests:** Sends a `POST` request to OpenAIâ€™s Chat Completions API (`GPT-4o`) with a structured prompt based on user input.
- **Response Handling:** Parses the JSON response to extract the generated quote.
- **Error Handling:** Manages potential errors such as invalid API keys, network issues, and rate limits.

#### SQLite Database Schema

**Table Name:** `quotes`

| Column       | Type      | Description                              |
|--------------|-----------|------------------------------------------|
| `id`         | INTEGER   | Primary Key (auto-incremented)           |
| `quote`      | TEXT      | The AI-generated quote                   |
| `created_at` | TIMESTAMP | Timestamp when the quote was saved        |

- **Database File:** `quotes.db` (automatically created in the current working directory if it doesn't exist).
- **Data Persistence:** All saved quotes are stored without duplication checks.

### Error Handling Strategy

| **Error Case**             | **Handling Strategy**                                                        |
|----------------------------|------------------------------------------------------------------------------|
| **API Key Missing**        | Prints an error message in red and exits the application immediately.      |
| **Network Issue**          | Prints an error message in red and exits the application immediately.      |
| **API Rate Limit**         | Prints an error message in red and exits the application immediately.      |
| **OpenAI API Failure**     | Prints an error message in red and exits the application immediately.      |
| **Database Error**         | Prints an error message in red and exits the application immediately.      |

**Example Error Outputs:**

